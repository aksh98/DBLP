{
  "name": "DBLP",
  "tagline": "Query Engine",
  "body": "## What we did in this Project\r\nThe DBLP computer science bibliography is the on-line reference for bibliographic information on major computer science publications. It has evolved from an early small experimental web server to a popular open-data service for the computer science community.\r\nIn this project, we built a **GUI search engine** which retrieves required information from the DBLP offline dataset.\r\n\r\nThe Dataset ( _[Available Here](http://dblp.uni-trier.de/xml/).The zipped file is about 342MB. Huge file !!_ O.O ) represents information about publications by different authors along with other information like the year of publication, the number of pages etc.\r\nThe file is in `XML` format. [This](http://dblp.uni-trier.de/faq/What+do+I+find+in+dblp+xml) is what it contains.\r\n\r\nIn our project, the following __Tasks__ were carried out:\r\n\r\n**Task1​ :** Parse the `XML` file using appropriate parsing techniques.\r\n\r\n**Task2 ​:** To retrieve and display the results of the given queries on this dataset.\r\n\r\n**Task3​:** To create a GUI using Java swing libraries to input the query parameters to the program.\r\n\r\nAnd __Functionalities__ implemented were :\r\n\r\n1. Display the result count along with the data.\r\n2. Perform Entity resolution. It simply means finding papers that belong to the same Author (entity) where the        author might have different names. For e.g. In research papers, sometimes an author uses his/her full name and sometimes his/her initials (or might have a different middle name). The task of entity resolution is to identify both to be the same author. During search, both the papers should be returned.\r\n03. If the data entered is invalid show appropriate message on the GUI itself.\r\n4. If no results are returned, display the message in the result box.\r\n5. Appropriate checks for values in the text boxes should be present in your\r\nimplementation and user should be prompted for such values.\r\n6. Result box should display first 20 results and should give user an option\r\n(button) to see next 20 results and so on.\r\n7. If returned results are less than 20, then show only the returned results.\r\n8. Results are always sorted by date. (Latest ones first)\r\n9. Results for _Query1_ should be in the following format:\r\n`<s_no>`, `<authors>`, `<title>`, `<pages>`, `<year>`, `<volume>`, `<journal/Booktitle>`,\r\n`<url>`\r\n10. Results for _Query2_ should be just author names in a single column on a new\r\n line in the result box.\r\n\r\n\r\n**Queries:**\r\n\r\n1. __Query1__\r\n  a. Find publications by a given author name.\r\n  b. Find publications by title tags.\r\n  Both the above queries have multiple options:\r\n     - Sorting by date (reverse)\r\n     - Sorting by relevance (matched words)\r\n     - Since some given year\r\n     - Inbetween two years\r\n\r\n2. __Query2__\r\n  a. Find names of authors with more than `k` publications.\r\n \r\n3. __Query3__\r\n​   Given a data upto a particular year, predict the number of papers an\r\n   author publishes in the next year.\r\n\r\n### Our Approach\r\n\r\nHow we chose to do this project can be seen in our [Project Report](https://github.com/aksh98/DBLP/blob/master/ProjectReport%20(1).pdf). :)\r\n\r\nAlso, just for reference we have some [Screenshots of our GUI here](https://github.com/aksh98/DBLP/blob/master/screenshots.docx).\r\n\r\n### Project contributions by :\r\n\r\n- Akarsha Sehwag(@aksh98) \r\n- Kushagra Arora(@kushagra7589)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}